# Cloud Build Configuration for Financial Predictor Application

steps:
  # Step 1: Install dependencies and run tests for API
  - name: 'python:3.11-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd apps/api
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        python -m pytest tests/ -v --cov=app --cov-report=xml
    id: 'test-api'

  # Step 2: Install dependencies and run tests for Web
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd apps/web
        npm ci
        npm run lint
        npm run type-check
        npm run test
    id: 'test-web'

  # Step 3: Security scanning for API
  - name: 'python:3.11-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd apps/api
        pip install bandit safety
        bandit -r app/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
    id: 'security-scan-api'

  # Step 4: Build API Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-api:$COMMIT_SHA'
      - '-t'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-api:latest'
      - '-f'
      - 'apps/api/Dockerfile'
      - './apps/api'
    id: 'build-api-image'
    waitFor: ['test-api', 'security-scan-api']

  # Step 5: Build Web Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-web:$COMMIT_SHA'
      - '-t'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-web:latest'
      - '-f'
      - 'apps/web/Dockerfile'
      - './apps/web'
      - '--build-arg'
      - 'NEXT_PUBLIC_API_URL=$_API_URL'
    id: 'build-web-image'
    waitFor: ['test-web']

  # Step 6: Build ML Service Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-ml:$COMMIT_SHA'
      - '-t'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-ml:latest'
      - '-f'
      - 'apps/ml-service/Dockerfile'
      - './apps/ml-service'
    id: 'build-ml-image'

  # Step 7: Push API image to registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-api:$COMMIT_SHA'
    id: 'push-api-image'
    waitFor: ['build-api-image']

  # Step 8: Push Web image to registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-web:$COMMIT_SHA'
    id: 'push-web-image'
    waitFor: ['build-web-image']

  # Step 9: Push ML image to registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-ml:$COMMIT_SHA'
    id: 'push-ml-image'
    waitFor: ['build-ml-image']

  # Step 10: Deploy API to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME-api'
      - '--image'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-api:$COMMIT_SHA'
      - '--region'
      - '$_DEPLOY_REGION'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-env-vars'
      - 'ENVIRONMENT=$_ENVIRONMENT'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--min-instances'
      - '$_MIN_INSTANCES'
      - '--max-instances'
      - '$_MAX_INSTANCES'
    id: 'deploy-api'
    waitFor: ['push-api-image']

  # Step 11: Deploy Web to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME-web'
      - '--image'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-web:$COMMIT_SHA'
      - '--region'
      - '$_DEPLOY_REGION'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '$_MIN_INSTANCES'
      - '--max-instances'
      - '$_MAX_INSTANCES'
    id: 'deploy-web'
    waitFor: ['push-web-image', 'deploy-api']

  # Step 12: Deploy ML Service to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME-ml'
      - '--image'
      - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-ml:$COMMIT_SHA'
      - '--region'
      - '$_DEPLOY_REGION'
      - '--platform'
      - 'managed'
      - '--no-allow-unauthenticated'
      - '--memory'
      - '4Gi'
      - '--cpu'
      - '2'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '5'
      - '--timeout'
      - '900'
    id: 'deploy-ml'
    waitFor: ['push-ml-image']

  # Step 13: Run database migrations
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the Cloud Run service URL
        API_URL=$(gcloud run services describe $_SERVICE_NAME-api --region=$_DEPLOY_REGION --format="value(status.url)")
        
        # Trigger database migration endpoint
        curl -X POST "$API_URL/admin/migrate" \
          -H "Authorization: Bearer $(gcloud auth print-access-token)" \
          -H "Content-Type: application/json"
    id: 'migrate-database'
    waitFor: ['deploy-api']

# Substitutions (environment variables)
substitutions:
  _GCR_HOSTNAME: 'gcr.io'
  _SERVICE_NAME: 'financial-predictor'
  _DEPLOY_REGION: 'us-central1'
  _ENVIRONMENT: 'dev'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'
  _API_URL: 'https://dev-api.financialpredictor.com'

# Build options
options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100

# Build timeout
timeout: '1800s'

# Images to be pushed to registry
images:
  - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-api:$COMMIT_SHA'
  - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-web:$COMMIT_SHA'
  - '$_GCR_HOSTNAME/$PROJECT_ID/$_SERVICE_NAME-ml:$COMMIT_SHA'

# Artifacts
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-build-artifacts'
    paths:
      - 'apps/api/bandit-report.json'
      - 'apps/api/safety-report.json'
      - 'apps/api/coverage.xml'