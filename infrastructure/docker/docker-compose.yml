# Docker Compose for Financial Predictor Application (Production)
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial-predictor-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-financial_predictor}
      POSTGRES_USER: ${DB_USER:-app_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - financial-predictor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-app_user} -d ${DB_NAME:-financial_predictor}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial-predictor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial-predictor-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    container_name: financial-predictor-api
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-app_user}:${DB_PASSWORD:-dev_password}@postgres:5432/${DB_NAME:-financial_predictor}
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-predictor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Service
  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://api:8000
    container_name: financial-predictor-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - financial-predictor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service
  ml-service:
    build:
      context: ../../apps/ml-service
      dockerfile: Dockerfile
    container_name: financial-predictor-ml
    environment:
      - ENVIRONMENT=production
      - MODEL_PATH=/app/models
    ports:
      - "8080:8080"
    volumes:
      - ml_models:/app/models
    networks:
      - financial-predictor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: financial-predictor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    networks:
      - financial-predictor-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local

networks:
  financial-predictor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16